{"version":3,"sources":["../../src/service/HttpService.js"],"names":["HttpService","url","fetch","then","_handleErrors","res","json","data","headers","method","body","JSON","stringify","ok","Error","statusText"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mCAAaA,W;;;;;;;wCAELC,G,EAAK;AAAA;;AAEL,+BAAOC,MAAMD,GAAN,EACFE,IADE,CACG;AAAA,mCAAO,MAAKC,aAAL,CAAmBC,GAAnB,CAAP;AAAA,yBADH,EAEFF,IAFE,CAEG;AAAA,mCAAOE,IAAIC,IAAJ,EAAP;AAAA,yBAFH,CAAP;AAGH;;;yCAEIL,G,EAAKM,I,EAAM;AAAA;;AAEZ,+BAAOL,MAAMD,GAAN,EAAW;AACdO,qCAAS,EAAE,gBAAgB,kBAAlB,EADK;AAEdC,oCAAQ,MAFM;AAGdC,kCAAMC,KAAKC,SAAL,CAAeL,IAAf;AAHQ,yBAAX,EAKNJ,IALM,CAKD;AAAA,mCAAO,OAAKC,aAAL,CAAmBC,GAAnB,CAAP;AAAA,yBALC,CAAP;AAMH;;;kDAEaA,G,EAAK;;AAEf,4BAAK,CAACA,IAAIQ,EAAV,EAAe,MAAM,IAAIC,KAAJ,CAAUT,IAAIU,UAAd,CAAN;AACf,+BAAOV,GAAP;AACH","file":"HttpService.js","sourcesContent":["export class HttpService {\n\n    get(url) {\n\n        return fetch(url)\n            .then(res => this._handleErrors(res))\n            .then(res => res.json());\n    }\n\n    post(url, data) {\n\n        return fetch(url, {\n            headers: { 'Content-type': 'application/json' },\n            method: 'post',\n            body: JSON.stringify(data)\n        })\n        .then(res => this._handleErrors(res));\n    }\n\n    _handleErrors(res) {\n\n        if ( !res.ok ) throw new Error(res.statusText);\n        return res;\n    }\n}"]}